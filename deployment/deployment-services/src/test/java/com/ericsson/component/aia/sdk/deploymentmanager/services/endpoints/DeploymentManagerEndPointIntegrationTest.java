/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2017
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------*/
package com.ericsson.component.aia.sdk.deploymentmanager.services.endpoints;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

import java.io.File;
import java.io.IOException;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.ericsson.aia.metadata.api.MetaDataServiceIfc;
import com.ericsson.aia.metadata.exception.MetaDataServiceException;
import com.ericsson.component.aia.sdk.deploymentmanager.DeploymentManagerImpl;
import com.ericsson.component.aia.sdk.deploymentmanager.services.configuration.DeploymentManagerTestApplication;
import com.ericsson.component.aia.sdk.pba.tools.PBASchemaTool;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Integration test for {@link ApplicationManagerEndPoint}
 *
 * @author emilawl
 *
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = DeploymentManagerTestApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@TestPropertySource(locations = "classpath:application-test.properties")
public class DeploymentManagerEndPointIntegrationTest {

    private static final Logger Log = LoggerFactory.getLogger(DeploymentManagerImpl.class);

    //Dummy file for populating the metadata store
    private static final String TEST_PBA_JSON = "src/test/resources/test-files/pba.json";

    private static final String TEST_METADATA_KEY = "pba.applicationInfo.id";
    private String applicationID = null;
    private boolean isSetup = false;

    @Autowired
    private TestRestTemplate restTemplate;

    @Autowired
    private MetaDataServiceIfc metaDataService;

    @Value("${application.catalog.name}")
    private String applicationCatalogName;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    public void shouldReturnOkStatusWhenDeployingIsSuccessfulDummyCase() throws Exception {

        String testUser = "someUserName";
        //Generated by the put into the metastore see below where this get overwritten

        String environmentID = " a80a056c-e097-4645-b3e5-806562a67b03,0.0.0.0,D,someToken,someUsername,asdasd,asdasdasd";

        Log.info("\n\n calling the /dm/deploy endpoint \n\n");

        final MultiValueMap<String, Object> map = new LinkedMultiValueMap<String, Object>();
        map.add("userID", testUser);
        map.add("applicationID", applicationID);
        map.add("environmentID", environmentID);
        final ResponseEntity<String> response = this.restTemplate.postForEntity("/dm/deploy", map, String.class);

        assertThat(response.getStatusCodeValue(), equalTo(200));
    }

    //      TODO the tests are run in random order so I might combine deploy undeploy so they are self cleaning ......
    //    @Test
    //    public void shouldReturnOkStatusWhenDeployingIsSuccessfulKubernetesCase() throws Exception {
    //
    //        String testUser = "kubernetes-admin";
    //        //Generated by the put into the metastore see below where this get overwritten
    //
    //        String clientKeyData = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRFM01EY3hNVEV4TURjME5sb1hEVEkzTURjd09URXhNRGMwTmxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUEFTCjhDcXMvK1RmWWI4MUp4VFBjVW5IMTlBaFV4anJNTzMxVmVkdmVtVW81VXlEbE4zQmNaVHNnbTZsQzhiUXQrWjYKR2JpNEhKenhXVjdVUkUwNitTc3BnRnJaNndoZlUxcW85Q3ROVFltWnAyVk5oNDdOMTIxRndDYk9CeU11Yi84cQpDdjd3K0lwWjl5Y0JkbGhqSnRBeFVJU1psZFB3VjZIYWFuSndjR0g0Ri9YQ1ZDOFZLaTJWU2NDaGY5RzlKQzJFCk95L281S05TVCtyN24rZjlqdzRmdjNsaDZXT0s0MWRzVURaZ1d6TFUxVWFmajlxWXN5d0VYd3FxRHM0KzFqVlgKYTdqc3BsSU5FcDhyL3ZQUTlMSEVHaTUzMG0xNlUyU21Hd0pqWitSb2t4Rm85eFZiMkNmNWxKREkwZ0tZd3gvKwpjZlpMTXFBeHZBc1JlSU1CVlRrQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDNDJ1MDhjOGRXQXBlMTk4SDJERnNCcVdObTIKTW5uUURQSG9ORTZRMEhuTWpYMDgxd2c5S1pIQ3VmRlBXakFSeEoxVklBZXhEYi9OZ3pYNEdSS3R4Uzhvekt2dApjTyswWGpieEFEakNuZFdxM2V0QmdpbEF2ZE9keCs3Y0F6TmFsUjhuR3E0a3gwTlgvWGs5SEE3RUpBVWdUWm1HCiswbWVuSGRVbDZtQlFpdnlwc2tmRm0wejEvQTZMM3lRS24vNS9nT0Vra0puTkI0ZlNCV3ZzOW1zM3Z0d2JLMnAKOXM1SjllTDc1WTlwNUMvaDJUS2hhakZINjJGdDhSdXk1eXkwc0s3aUdhamsvQzlEUEh4c01EOFFWVSsyRTBNSgpjcjBrK0pxU21GWitMS0FRTkNwV1cwL2haelhrbG5nRXQyN05pSWlhLzhDdW9mV0ZqYWZVTWZuZUdxST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo===";
    //        String clientCertData = " LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lJY0FCRTdXN3J3eFV3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB4TnpBM01URXhNVEEzTkRaYUZ3MHhPREEzTVRFeE1UQTNOVEJhTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdNZ2p2NkpxeXplZVdGbEMKS05STEpzSWVXQVBlVjdXeUE5MmRJc3BvcmtWTjUrWkZxQUVCaDFQdDdPalkvYjMrbk92aTRyMmI0QlFLd1BBeApNY1EyMHF4aE9hQVh2bzZOeEwrcTRyQVhnMW1DSkNwUWw5dmc1SnozUVlKNWcvRTkva2ZFRGZySkN1QllQTGhoCmRqYVVWWTk4MThlTEtUZEJWTWtZYlFzL1UzLzdiMm1tMGxJbXZKUlVXR01kaTNWZmdoZElsSUdmNnU1SGFVNkgKN29WMFphVjdWeHRiZEdPWHZXMEdTV3lHTHRoMk0vOEVCT280TE5lc2FOVnRqNEx3eVBtVkdHaEhWWXZnZ3ptdwpxUXVma0tyRUZTMytZSmZtNnZ6SzJhbXhnRUFZUWpmaHRiQWdnUWFNQ2thMlZVTkM5WHRuSC83Mk55ZDNpK0pVCkhGVmFVd0lEQVFBQm95Y3dKVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFOcGtkOG14VHhoVjJmK2VvMEtHck5NaTJNcEhycWlHZG40dQowYXI2U28yNkNSM09pNTFMU3hqUFhVZVI1L3BRNGQ4VTlTMWEyNlpQT3Z6TVdaNEZNdWxQdXJ3Y1prbEpRam9mCjZDZFR3Y0xJWGFHQXIyS09UNVU2ZEt3RGJkNTVoVFFOTVNSSGxUNlA1ejJyNU9uR0RQakxQT1FBcmZQaWgrY3gKSmM5ZDdQQW1mYXNzZGdwQWpPY1Z3eWNvRjlSeG00MUVmZjhHVmtzc2g0MGVvQnNnWEpPZURtdmYxc0h3Nk9tbApkdFZLZ1RvZVFaa3hPRzVuOEM3dXljd2tuc0JIU25PZ0tDQ2hDbDM3SkU4NHdGN0JtMi9wNWtCWTJGdTJtZW91CmgwVWJ0UTUzcjNadzB4T3RRYmJZNHhidmtsMGFXdnJOd01KWDY3R0RtSzJWMERUVitFVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=";
    //        String token = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd01nanY2SnF5emVlV0ZsQ0tOUkxKc0llV0FQZVY3V3lBOTJkSXNwb3JrVk41K1pGCnFBRUJoMVB0N09qWS9iMytuT3ZpNHIyYjRCUUt3UEF4TWNRMjBxeGhPYUFYdm82TnhMK3E0ckFYZzFtQ0pDcFEKbDl2ZzVKejNRWUo1Zy9FOS9rZkVEZnJKQ3VCWVBMaGhkamFVVlk5ODE4ZUxLVGRCVk1rWWJRcy9VMy83YjJtbQowbEltdkpSVVdHTWRpM1ZmZ2hkSWxJR2Y2dTVIYVU2SDdvVjBaYVY3Vnh0YmRHT1h2VzBHU1d5R0x0aDJNLzhFCkJPbzRMTmVzYU5WdGo0THd5UG1WR0doSFZZdmdnem13cVF1ZmtLckVGUzMrWUpmbTZ2eksyYW14Z0VBWVFqZmgKdGJBZ2dRYU1Da2EyVlVOQzlYdG5ILzcyTnlkM2krSlVIRlZhVXdJREFRQUJBb0lCQUdRZEM0T1BZd3BadmQ5LwpxdjN0RVlIMU9URFlBWFZuSkNVaHgyS3ozcHp4M0wxYk5qMURHSG9ndWVSWUg2ZldMUTFzNm94NWp5TlZCU2loCkU4c1diS29IWHc0LzkxUzhUeDhuc2lTNjhkc0NkclUxVEZrd2xKL2thL3NYT09ldU5sV0JDMjEvR1R5T3VRUC8KZEkyaFZuTUFhd0xiMjRieDdQbU0zU1J6dk5VdE1CUm1vanplS1B6dUZKd1FMNW05UUNXYU5GSVBLN3BQWEV0ZApoZ096UEFNUHZZSXpYSzNySHd0c2ZyNWNPbTlRenNZUWlpNWlkckRUdFpmcXNaMVI5UFE5Um5mTEQxbk5DVTlzCkFRYjBOMG1xOGN6OGRvSE51RjRxMVBUWGNzZGZyU1dnZ1R0YTdPd2xBb1IwaXQwd2hobHFpNE1JekdiMzdNdlMKWStQQytBRUNnWUVBemovdHplNDk4M09uZGFKN2N1b29rL3NnaEpVR2JZMnpPTDhXT2gxSWY5cHFCaTRFMWRQRQpSUWpTcXFMRk1pbmtKZzQvdGZJZ1VQa0tzWkhMUVEyTlpaRDNWU1hydksxR2Zrakx2a1IxWU8rUTMyNEt2aGJ0CnZrTXNZdUJBTGh1b2NNc3h1Ty9zb1Z2MzROUzZkS0NvMFk3TTE1OVZMUmVuWDVBNDFQTFR2Z0VDZ1lFQTcwaU8KYjhEeTNVbFN5NGRXcGFMWDFKdHpieHFiNTB5MFZlL1lDeUpVYVNHRmY3VGwrQlgrMUNzTHpVa0haRXpXMTNXdQpGOUdOMDBKM0l3b3Z1Z1krQ2FrSDdsZDZtMy8zUU1SMkdPSDdoSDVWVGhoaW9tYTZRUjRZSkRnenJLYmZNczVBCklheERaWlBMaWRpWmRJWi9xNTc0aWZSZ3JWYkV6T2JGdkc4dXdGTUNnWUIwY0VVSitKR0RDdTBralVtU2M3M2EKNVhEVFNPcnJHSTl3M3ZobWNMZklibjlpNDhJWkVjZ0JqVnladHZFTFEva292dXliQkluWURQRkxsRnFpYkV0QwpadGdyZXhBZVlkaWxYT1doa2phT05sR2N3aHhRZXROWGtjYlNQM1ljVWNNRGdzT2NlOThrcmE1QWdQaU85VkM1CmxodnhNMk83NUZtNnFzcGE5b2d5QVFLQmdRQzVhRklkMjdjVHFnWUNlSnExKzJrYmIxeFJnWis5Nkp4dlhrbmIKenJ6elBTc3hHaDE3VHFmSEJKZS9lRS9HOHhjaG1pak1nZTVQL05kTmlrNFM2VlZXck9mZFVXRktiaXhLdmkvMwo5ZHFxL2l6aE4xbnVGb1ZKZ2FVWkk0Yyt4NHA0MW9HdzFjYmZSVmJZTjhJb0hUTjk2czhRTGhCZkg3V2NRMUNDClF2Qkp5d0tCZ0MzZzFPbDVxbDROSWNMc1VXbDcrZUhaOW1lMGJNVUFhbFVERktTdWNZSlRkM2pDVDhYRVZRY0UKaldLVm9WRmw3aFBhcHFaZ1kwYjZpWEVaTURRMDVxbU03Y1FaSlJ1Y1ZSRGJDNTlnM0tZcXh0S25ndEs5enJCTwozYU5kbWJ3ZjJHQzVNWU9sWXRIQWVFUHpkck9teFdEUWJDaE9GM3U0TUtPcVZrNnkybGZPCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==";
    //        String environmentID = " a80a056c-e097-4645-b3e5-806562a67b03,10.44.149.62:6443,K," + token + ",someUsername," + clientCertData + ","
    //                + clientKeyData;
    //
    //        Log.info("\n\n calling the /dm/deploy endpoint \n\n");
    //
    //        final MultiValueMap<String, Object> map = new LinkedMultiValueMap<String, Object>();
    //        map.add("userID", testUser);
    //        map.add("applicationID", applicationID);
    //        map.add("environmentID", environmentID);
    //        final ResponseEntity<String> response = this.restTemplate.postForEntity("/dm/deploy", map, String.class);
    //        Log.info("---------------------------------------- {}", response.getBody());
    //        Log.info("---------------------------------------- {}", response.getStatusCodeValue());
    //        assertThat(response.getStatusCodeValue(), equalTo(200));
    //    }

    @Test
    public void shouldReturnOkStatusWhenUnDeployingIsSuccessfulKubernetesCase() throws Exception {

        String testUser = "kubernetes-admin";
        //Generated by the put into the metastore see below where this get overwritten

        String clientKeyData = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRFM01EY3hNVEV4TURjME5sb1hEVEkzTURjd09URXhNRGMwTmxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUEFTCjhDcXMvK1RmWWI4MUp4VFBjVW5IMTlBaFV4anJNTzMxVmVkdmVtVW81VXlEbE4zQmNaVHNnbTZsQzhiUXQrWjYKR2JpNEhKenhXVjdVUkUwNitTc3BnRnJaNndoZlUxcW85Q3ROVFltWnAyVk5oNDdOMTIxRndDYk9CeU11Yi84cQpDdjd3K0lwWjl5Y0JkbGhqSnRBeFVJU1psZFB3VjZIYWFuSndjR0g0Ri9YQ1ZDOFZLaTJWU2NDaGY5RzlKQzJFCk95L281S05TVCtyN24rZjlqdzRmdjNsaDZXT0s0MWRzVURaZ1d6TFUxVWFmajlxWXN5d0VYd3FxRHM0KzFqVlgKYTdqc3BsSU5FcDhyL3ZQUTlMSEVHaTUzMG0xNlUyU21Hd0pqWitSb2t4Rm85eFZiMkNmNWxKREkwZ0tZd3gvKwpjZlpMTXFBeHZBc1JlSU1CVlRrQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDNDJ1MDhjOGRXQXBlMTk4SDJERnNCcVdObTIKTW5uUURQSG9ORTZRMEhuTWpYMDgxd2c5S1pIQ3VmRlBXakFSeEoxVklBZXhEYi9OZ3pYNEdSS3R4Uzhvekt2dApjTyswWGpieEFEakNuZFdxM2V0QmdpbEF2ZE9keCs3Y0F6TmFsUjhuR3E0a3gwTlgvWGs5SEE3RUpBVWdUWm1HCiswbWVuSGRVbDZtQlFpdnlwc2tmRm0wejEvQTZMM3lRS24vNS9nT0Vra0puTkI0ZlNCV3ZzOW1zM3Z0d2JLMnAKOXM1SjllTDc1WTlwNUMvaDJUS2hhakZINjJGdDhSdXk1eXkwc0s3aUdhamsvQzlEUEh4c01EOFFWVSsyRTBNSgpjcjBrK0pxU21GWitMS0FRTkNwV1cwL2haelhrbG5nRXQyN05pSWlhLzhDdW9mV0ZqYWZVTWZuZUdxST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo===";
        String clientCertData = " LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lJY0FCRTdXN3J3eFV3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB4TnpBM01URXhNVEEzTkRaYUZ3MHhPREEzTVRFeE1UQTNOVEJhTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdNZ2p2NkpxeXplZVdGbEMKS05STEpzSWVXQVBlVjdXeUE5MmRJc3BvcmtWTjUrWkZxQUVCaDFQdDdPalkvYjMrbk92aTRyMmI0QlFLd1BBeApNY1EyMHF4aE9hQVh2bzZOeEwrcTRyQVhnMW1DSkNwUWw5dmc1SnozUVlKNWcvRTkva2ZFRGZySkN1QllQTGhoCmRqYVVWWTk4MThlTEtUZEJWTWtZYlFzL1UzLzdiMm1tMGxJbXZKUlVXR01kaTNWZmdoZElsSUdmNnU1SGFVNkgKN29WMFphVjdWeHRiZEdPWHZXMEdTV3lHTHRoMk0vOEVCT280TE5lc2FOVnRqNEx3eVBtVkdHaEhWWXZnZ3ptdwpxUXVma0tyRUZTMytZSmZtNnZ6SzJhbXhnRUFZUWpmaHRiQWdnUWFNQ2thMlZVTkM5WHRuSC83Mk55ZDNpK0pVCkhGVmFVd0lEQVFBQm95Y3dKVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFOcGtkOG14VHhoVjJmK2VvMEtHck5NaTJNcEhycWlHZG40dQowYXI2U28yNkNSM09pNTFMU3hqUFhVZVI1L3BRNGQ4VTlTMWEyNlpQT3Z6TVdaNEZNdWxQdXJ3Y1prbEpRam9mCjZDZFR3Y0xJWGFHQXIyS09UNVU2ZEt3RGJkNTVoVFFOTVNSSGxUNlA1ejJyNU9uR0RQakxQT1FBcmZQaWgrY3gKSmM5ZDdQQW1mYXNzZGdwQWpPY1Z3eWNvRjlSeG00MUVmZjhHVmtzc2g0MGVvQnNnWEpPZURtdmYxc0h3Nk9tbApkdFZLZ1RvZVFaa3hPRzVuOEM3dXljd2tuc0JIU25PZ0tDQ2hDbDM3SkU4NHdGN0JtMi9wNWtCWTJGdTJtZW91CmgwVWJ0UTUzcjNadzB4T3RRYmJZNHhidmtsMGFXdnJOd01KWDY3R0RtSzJWMERUVitFVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=";
        String token = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd01nanY2SnF5emVlV0ZsQ0tOUkxKc0llV0FQZVY3V3lBOTJkSXNwb3JrVk41K1pGCnFBRUJoMVB0N09qWS9iMytuT3ZpNHIyYjRCUUt3UEF4TWNRMjBxeGhPYUFYdm82TnhMK3E0ckFYZzFtQ0pDcFEKbDl2ZzVKejNRWUo1Zy9FOS9rZkVEZnJKQ3VCWVBMaGhkamFVVlk5ODE4ZUxLVGRCVk1rWWJRcy9VMy83YjJtbQowbEltdkpSVVdHTWRpM1ZmZ2hkSWxJR2Y2dTVIYVU2SDdvVjBaYVY3Vnh0YmRHT1h2VzBHU1d5R0x0aDJNLzhFCkJPbzRMTmVzYU5WdGo0THd5UG1WR0doSFZZdmdnem13cVF1ZmtLckVGUzMrWUpmbTZ2eksyYW14Z0VBWVFqZmgKdGJBZ2dRYU1Da2EyVlVOQzlYdG5ILzcyTnlkM2krSlVIRlZhVXdJREFRQUJBb0lCQUdRZEM0T1BZd3BadmQ5LwpxdjN0RVlIMU9URFlBWFZuSkNVaHgyS3ozcHp4M0wxYk5qMURHSG9ndWVSWUg2ZldMUTFzNm94NWp5TlZCU2loCkU4c1diS29IWHc0LzkxUzhUeDhuc2lTNjhkc0NkclUxVEZrd2xKL2thL3NYT09ldU5sV0JDMjEvR1R5T3VRUC8KZEkyaFZuTUFhd0xiMjRieDdQbU0zU1J6dk5VdE1CUm1vanplS1B6dUZKd1FMNW05UUNXYU5GSVBLN3BQWEV0ZApoZ096UEFNUHZZSXpYSzNySHd0c2ZyNWNPbTlRenNZUWlpNWlkckRUdFpmcXNaMVI5UFE5Um5mTEQxbk5DVTlzCkFRYjBOMG1xOGN6OGRvSE51RjRxMVBUWGNzZGZyU1dnZ1R0YTdPd2xBb1IwaXQwd2hobHFpNE1JekdiMzdNdlMKWStQQytBRUNnWUVBemovdHplNDk4M09uZGFKN2N1b29rL3NnaEpVR2JZMnpPTDhXT2gxSWY5cHFCaTRFMWRQRQpSUWpTcXFMRk1pbmtKZzQvdGZJZ1VQa0tzWkhMUVEyTlpaRDNWU1hydksxR2Zrakx2a1IxWU8rUTMyNEt2aGJ0CnZrTXNZdUJBTGh1b2NNc3h1Ty9zb1Z2MzROUzZkS0NvMFk3TTE1OVZMUmVuWDVBNDFQTFR2Z0VDZ1lFQTcwaU8KYjhEeTNVbFN5NGRXcGFMWDFKdHpieHFiNTB5MFZlL1lDeUpVYVNHRmY3VGwrQlgrMUNzTHpVa0haRXpXMTNXdQpGOUdOMDBKM0l3b3Z1Z1krQ2FrSDdsZDZtMy8zUU1SMkdPSDdoSDVWVGhoaW9tYTZRUjRZSkRnenJLYmZNczVBCklheERaWlBMaWRpWmRJWi9xNTc0aWZSZ3JWYkV6T2JGdkc4dXdGTUNnWUIwY0VVSitKR0RDdTBralVtU2M3M2EKNVhEVFNPcnJHSTl3M3ZobWNMZklibjlpNDhJWkVjZ0JqVnladHZFTFEva292dXliQkluWURQRkxsRnFpYkV0QwpadGdyZXhBZVlkaWxYT1doa2phT05sR2N3aHhRZXROWGtjYlNQM1ljVWNNRGdzT2NlOThrcmE1QWdQaU85VkM1CmxodnhNMk83NUZtNnFzcGE5b2d5QVFLQmdRQzVhRklkMjdjVHFnWUNlSnExKzJrYmIxeFJnWis5Nkp4dlhrbmIKenJ6elBTc3hHaDE3VHFmSEJKZS9lRS9HOHhjaG1pak1nZTVQL05kTmlrNFM2VlZXck9mZFVXRktiaXhLdmkvMwo5ZHFxL2l6aE4xbnVGb1ZKZ2FVWkk0Yyt4NHA0MW9HdzFjYmZSVmJZTjhJb0hUTjk2czhRTGhCZkg3V2NRMUNDClF2Qkp5d0tCZ0MzZzFPbDVxbDROSWNMc1VXbDcrZUhaOW1lMGJNVUFhbFVERktTdWNZSlRkM2pDVDhYRVZRY0UKaldLVm9WRmw3aFBhcHFaZ1kwYjZpWEVaTURRMDVxbU03Y1FaSlJ1Y1ZSRGJDNTlnM0tZcXh0S25ndEs5enJCTwozYU5kbWJ3ZjJHQzVNWU9sWXRIQWVFUHpkck9teFdEUWJDaE9GM3U0TUtPcVZrNnkybGZPCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==";
        String environmentID = " a80a056c-e097-4645-b3e5-806562a67b03,10.44.149.62:6443,K," + token + ",someUsername," + clientCertData + ","
                + clientKeyData;

        Log.info("\n\n calling the /dm/deploy endpoint \n\n");

        final MultiValueMap<String, Object> map = new LinkedMultiValueMap<String, Object>();
        map.add("userID", testUser);
        map.add("applicationID", applicationID);
        map.add("environmentID", environmentID);
        final ResponseEntity<String> responseDeploy = this.restTemplate.postForEntity("/dm/deploy", map, String.class);
        Log.info("---------------------------------------- {}", responseDeploy.getBody());
        Log.info("---------------------------------------- {}", responseDeploy.getStatusCodeValue());
        assertThat(responseDeploy.getStatusCodeValue(), equalTo(200));
        final ResponseEntity<String> responseUndeploy = this.restTemplate.postForEntity("/dm/undeploy", map, String.class);
        Log.info("---------------------------------------- {}", responseUndeploy.getBody());
        Log.info("---------------------------------------- {}", responseUndeploy.getStatusCodeValue());
        assertThat(responseUndeploy.getStatusCodeValue(), equalTo(200));
    }

    @Test
    public void shouldReturnFalseStatusWhenDeployingHasFailedKubernetesCase() throws Exception {

        String testUser = "kubernetes-admin";
        //Generated by the put into the metastore see below where this get overwritten

        String clientKeyData = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRFM01EY3hNVEV4TURjME5sb1hEVEkzTURjd09URXhNRGMwTmxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUEFTCjhDcXMvK1RmWWI4MUp4VFBjVW5IMTlBaFV4anJNTzMxVmVkdmVtVW81VXlEbE4zQmNaVHNnbTZsQzhiUXQrWjYKR2JpNEhKenhXVjdVUkUwNitTc3BnRnJaNndoZlUxcW85Q3ROVFltWnAyVk5oNDdOMTIxRndDYk9CeU11Yi84cQpDdjd3K0lwWjl5Y0JkbGhqSnRBeFVJU1psZFB3VjZIYWFuSndjR0g0Ri9YQ1ZDOFZLaTJWU2NDaGY5RzlKQzJFCk95L281S05TVCtyN24rZjlqdzRmdjNsaDZXT0s0MWRzVURaZ1d6TFUxVWFmajlxWXN5d0VYd3FxRHM0KzFqVlgKYTdqc3BsSU5FcDhyL3ZQUTlMSEVHaTUzMG0xNlUyU21Hd0pqWitSb2t4Rm85eFZiMkNmNWxKREkwZ0tZd3gvKwpjZlpMTXFBeHZBc1JlSU1CVlRrQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDNDJ1MDhjOGRXQXBlMTk4SDJERnNCcVdObTIKTW5uUURQSG9ORTZRMEhuTWpYMDgxd2c5S1pIQ3VmRlBXakFSeEoxVklBZXhEYi9OZ3pYNEdSS3R4Uzhvekt2dApjTyswWGpieEFEakNuZFdxM2V0QmdpbEF2ZE9keCs3Y0F6TmFsUjhuR3E0a3gwTlgvWGs5SEE3RUpBVWdUWm1HCiswbWVuSGRVbDZtQlFpdnlwc2tmRm0wejEvQTZMM3lRS24vNS9nT0Vra0puTkI0ZlNCV3ZzOW1zM3Z0d2JLMnAKOXM1SjllTDc1WTlwNUMvaDJUS2hhakZINjJGdDhSdXk1eXkwc0s3aUdhamsvQzlEUEh4c01EOFFWVSsyRTBNSgpjcjBrK0pxU21GWitMS0FRTkNwV1cwL2haelhrbG5nRXQyN05pSWlhLzhDdW9mV0ZqYWZVTWZuZUdxST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo===";
        String clientCertData = " LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lJY0FCRTdXN3J3eFV3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB4TnpBM01URXhNVEEzTkRaYUZ3MHhPREEzTVRFeE1UQTNOVEJhTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXdNZ2p2NkpxeXplZVdGbEMKS05STEpzSWVXQVBlVjdXeUE5MmRJc3BvcmtWTjUrWkZxQUVCaDFQdDdPalkvYjMrbk92aTRyMmI0QlFLd1BBeApNY1EyMHF4aE9hQVh2bzZOeEwrcTRyQVhnMW1DSkNwUWw5dmc1SnozUVlKNWcvRTkva2ZFRGZySkN1QllQTGhoCmRqYVVWWTk4MThlTEtUZEJWTWtZYlFzL1UzLzdiMm1tMGxJbXZKUlVXR01kaTNWZmdoZElsSUdmNnU1SGFVNkgKN29WMFphVjdWeHRiZEdPWHZXMEdTV3lHTHRoMk0vOEVCT280TE5lc2FOVnRqNEx3eVBtVkdHaEhWWXZnZ3ptdwpxUXVma0tyRUZTMytZSmZtNnZ6SzJhbXhnRUFZUWpmaHRiQWdnUWFNQ2thMlZVTkM5WHRuSC83Mk55ZDNpK0pVCkhGVmFVd0lEQVFBQm95Y3dKVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdJd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFOcGtkOG14VHhoVjJmK2VvMEtHck5NaTJNcEhycWlHZG40dQowYXI2U28yNkNSM09pNTFMU3hqUFhVZVI1L3BRNGQ4VTlTMWEyNlpQT3Z6TVdaNEZNdWxQdXJ3Y1prbEpRam9mCjZDZFR3Y0xJWGFHQXIyS09UNVU2ZEt3RGJkNTVoVFFOTVNSSGxUNlA1ejJyNU9uR0RQakxQT1FBcmZQaWgrY3gKSmM5ZDdQQW1mYXNzZGdwQWpPY1Z3eWNvRjlSeG00MUVmZjhHVmtzc2g0MGVvQnNnWEpPZURtdmYxc0h3Nk9tbApkdFZLZ1RvZVFaa3hPRzVuOEM3dXljd2tuc0JIU25PZ0tDQ2hDbDM3SkU4NHdGN0JtMi9wNWtCWTJGdTJtZW91CmgwVWJ0UTUzcjNadzB4T3RRYmJZNHhidmtsMGFXdnJOd01KWDY3R0RtSzJWMERUVitFVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=";
        String bad = "dfssd";
        String environmentID = " a80a056c-e097-4645-b3e5-806562a67b03,10.44.149.62:6443,K," + bad + ",someUsername," + clientCertData + ","
                + clientKeyData;

        Log.info("\n\n calling the /dm/deploy endpoint \n\n");

        final MultiValueMap<String, Object> map = new LinkedMultiValueMap<String, Object>();
        map.add("userID", testUser);
        map.add("applicationID", applicationID);
        map.add("environmentID", environmentID);
        final ResponseEntity<String> response = this.restTemplate.postForEntity("/dm/deploy", map, String.class);

        assertThat(response.getStatusCodeValue(), equalTo(500));
    }

    //    @After
    //    public void cleanUp() throws MetaDataServiceException {
    //
    //        metaDataService.delete(applicationCatalogName, "*");
    //
    //    }

    @Before
    public void setUp() throws MetaDataServiceException, IOException {
        if (isSetup) {
            return;
        }
        Log.info("\n\n Populating the metastore \n\n");
        final File pbaJson = new File(TEST_PBA_JSON);
        final String pbaAsString = PBASchemaTool.readStreamAsStringFronFile(pbaJson.toPath());
        applicationID = metaDataService.putMetaData(applicationCatalogName, TEST_METADATA_KEY, pbaAsString);
        isSetup = true;
    }
}
